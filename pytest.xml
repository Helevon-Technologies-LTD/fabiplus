<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="17" skipped="53" tests="149" time="11.839" timestamp="2025-07-28T12:05:12.957562" hostname="pop-os"><testcase classname="fabiplus.tests.test_basic" name="test_root_endpoint" time="0.243" /><testcase classname="fabiplus.tests.test_basic" name="test_health_check" time="0.100" /><testcase classname="fabiplus.tests.test_basic" name="test_create_user" time="0.366" /><testcase classname="fabiplus.tests.test_basic" name="test_authenticate_user" time="0.942" /><testcase classname="fabiplus.tests.test_basic" name="test_jwt_token_creation" time="0.006" /><testcase classname="fabiplus.tests.test_basic" name="test_login_endpoint" time="0.731" /><testcase classname="fabiplus.tests.test_basic" name="test_model_registry" time="0.001" /><testcase classname="fabiplus.tests.test_basic" name="test_admin_endpoints_require_auth" time="0.187"><failure message="assert 200 == 401&#10; +  where 200 = &lt;Response [200 OK]&gt;.status_code">client = &lt;starlette.testclient.TestClient object at 0x7b81890b8610&gt;

    def test_admin_endpoints_require_auth(client: TestClient):
        """Test that admin endpoints require authentication"""
        response = client.get("/admin/")
&gt;       assert response.status_code == 401
E       assert 200 == 401
E        +  where 200 = &lt;Response [200 OK]&gt;.status_code

fabiplus/tests/test_basic.py:184: AssertionError</failure></testcase><testcase classname="fabiplus.tests.test_basic" name="test_api_endpoints_exist" time="0.105"><failure message="assert 404 == 200&#10; +  where 404 = &lt;Response [404 Not Found]&gt;.status_code">client = &lt;starlette.testclient.TestClient object at 0x7b8188f4f340&gt;

    def test_api_endpoints_exist(client: TestClient):
        """Test that API endpoints are created for models"""
        # Test user endpoints
        response = client.get("/api/user/")
        # Should return 200 with empty results (no auth required for listing)
&gt;       assert response.status_code == 200
E       assert 404 == 200
E        +  where 404 = &lt;Response [404 Not Found]&gt;.status_code

fabiplus/tests/test_basic.py:192: AssertionError</failure></testcase><testcase classname="fabiplus.tests.test_cli_templates.TestProjectCLI" name="test_startproject_command_basic" time="0.021"><failure message="AssertionError: expected call not found.&#10;Expected: ProjectTemplate('testproject', 'default', include_docker=False)&#10;Actual: ProjectTemplate('testproject', 'default', include_docker=False, orm_backend='sqlmodel', auth_backend='oauth2', show_admin_routes=False)">self = &lt;fabiplus.tests.test_cli_templates.TestProjectCLI object at 0x7b818b624ca0&gt;

    def test_startproject_command_basic(self):
        """Test basic startproject command"""
        project_name = "testproject"
    
        with patch("fabiplus.cli.commands.project.ProjectTemplate") as mock_template:
            mock_instance = MagicMock()
            mock_template.return_value = mock_instance
    
            result = self.runner.invoke(
                project_app, ["startproject", project_name, "--dir", str(self.temp_dir)]
            )
    
            assert result.exit_code == 0
&gt;           mock_template.assert_called_once_with(
                project_name, "default", include_docker=False
            )

fabiplus/tests/test_cli_templates.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/lib/python3.10/unittest/mock.py:941: in assert_called_once_with
    return self.assert_called_with(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;MagicMock name='ProjectTemplate' id='135796277771520'&gt;, args = ('testproject', 'default')
kwargs = {'include_docker': False}, expected = call('testproject', 'default', include_docker=False)
actual = call('testproject', 'default', include_docker=False, orm_backend='sqlmodel', auth_backend='oauth2', show_admin_routes=False)
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x7b8188ff5e10&gt;, cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: ProjectTemplate('testproject', 'default', include_docker=False)
E           Actual: ProjectTemplate('testproject', 'default', include_docker=False, orm_backend='sqlmodel', auth_backend='oauth2', show_admin_routes=False)

/usr/lib/python3.10/unittest/mock.py:929: AssertionError</failure></testcase><testcase classname="fabiplus.tests.test_cli_templates.TestProjectCLI" name="test_startproject_command_with_template" time="0.013"><failure message="AssertionError: expected call not found.&#10;Expected: ProjectTemplate('testproject', 'minimal', include_docker=False)&#10;Actual: ProjectTemplate('testproject', 'minimal', include_docker=False, orm_backend='sqlmodel', auth_backend='oauth2', show_admin_routes=False)">self = &lt;fabiplus.tests.test_cli_templates.TestProjectCLI object at 0x7b818b624df0&gt;

    def test_startproject_command_with_template(self):
        """Test startproject command with template option"""
        project_name = "testproject"
        template_type = "minimal"
    
        with patch("fabiplus.cli.commands.project.ProjectTemplate") as mock_template:
            mock_instance = MagicMock()
            mock_template.return_value = mock_instance
    
            result = self.runner.invoke(
                project_app,
                [
                    "startproject",
                    project_name,
                    "--template",
                    template_type,
                    "--dir",
                    str(self.temp_dir),
                ],
            )
    
            assert result.exit_code == 0
&gt;           mock_template.assert_called_once_with(
                project_name, template_type, include_docker=False
            )

fabiplus/tests/test_cli_templates.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/lib/python3.10/unittest/mock.py:941: in assert_called_once_with
    return self.assert_called_with(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;MagicMock name='ProjectTemplate' id='135796277836144'&gt;, args = ('testproject', 'minimal')
kwargs = {'include_docker': False}, expected = call('testproject', 'minimal', include_docker=False)
actual = call('testproject', 'minimal', include_docker=False, orm_backend='sqlmodel', auth_backend='oauth2', show_admin_routes=False)
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x7b8188e96680&gt;, cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: ProjectTemplate('testproject', 'minimal', include_docker=False)
E           Actual: ProjectTemplate('testproject', 'minimal', include_docker=False, orm_backend='sqlmodel', auth_backend='oauth2', show_admin_routes=False)

/usr/lib/python3.10/unittest/mock.py:929: AssertionError</failure></testcase><testcase classname="fabiplus.tests.test_cli_templates.TestProjectCLI" name="test_startproject_command_with_docker" time="0.017"><failure message="AssertionError: expected call not found.&#10;Expected: ProjectTemplate('testproject', 'default', include_docker=True)&#10;Actual: ProjectTemplate('testproject', 'default', include_docker=True, orm_backend='sqlmodel', auth_backend='oauth2', show_admin_routes=False)">self = &lt;fabiplus.tests.test_cli_templates.TestProjectCLI object at 0x7b818b624f40&gt;

    def test_startproject_command_with_docker(self):
        """Test startproject command with Docker option"""
        project_name = "testproject"
    
        with patch("fabiplus.cli.commands.project.ProjectTemplate") as mock_template:
            mock_instance = MagicMock()
            mock_template.return_value = mock_instance
    
            result = self.runner.invoke(
                project_app,
                ["startproject", project_name, "--docker", "--dir", str(self.temp_dir)],
            )
    
            assert result.exit_code == 0
&gt;           mock_template.assert_called_once_with(
                project_name, "default", include_docker=True
            )

fabiplus/tests/test_cli_templates.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/lib/python3.10/unittest/mock.py:941: in assert_called_once_with
    return self.assert_called_with(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;MagicMock name='ProjectTemplate' id='135796277762112'&gt;, args = ('testproject', 'default')
kwargs = {'include_docker': True}, expected = call('testproject', 'default', include_docker=True)
actual = call('testproject', 'default', include_docker=True, orm_backend='sqlmodel', auth_backend='oauth2', show_admin_routes=False)
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x7b8189298e50&gt;, cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: ProjectTemplate('testproject', 'default', include_docker=True)
E           Actual: ProjectTemplate('testproject', 'default', include_docker=True, orm_backend='sqlmodel', auth_backend='oauth2', show_admin_routes=False)

/usr/lib/python3.10/unittest/mock.py:929: AssertionError</failure></testcase><testcase classname="fabiplus.tests.test_cli_templates.TestProjectCLI" name="test_startproject_command_with_force" time="0.016" /><testcase classname="fabiplus.tests.test_cli_templates.TestProjectCLI" name="test_list_templates_command" time="0.011" /><testcase classname="fabiplus.tests.test_cli_templates.TestProjectCLI" name="test_init_command" time="0.016" /><testcase classname="fabiplus.tests.test_cli_templates.TestProjectCLI" name="test_startproject_error_handling" time="0.019" /><testcase classname="fabiplus.tests.test_cli_templates.TestAppCLI" name="test_startapp_command_basic" time="0.020"><failure message="AssertionError: expected call not found.&#10;Expected: AppTemplate('testapp', 'default')&#10;Actual: AppTemplate('testapp', 'default', orm_backend='sqlmodel')">self = &lt;fabiplus.tests.test_cli_templates.TestAppCLI object at 0x7b818b6258a0&gt;

    def test_startapp_command_basic(self):
        """Test basic startapp command"""
        app_name = "testapp"
    
        with patch("fabiplus.cli.commands.app.AppTemplate") as mock_template:
            mock_instance = MagicMock()
            mock_template.return_value = mock_instance
    
            # Mock Path.cwd() to return our temp directory
            with patch("pathlib.Path.cwd", return_value=self.temp_dir):
                # Mock the _is_fabiplus_project function to return True
                with patch(
                    "fabiplus.cli.commands.app._is_fabiplus_project", return_value=True
                ):
                    result = self.runner.invoke(app_app, ["startapp", app_name])
    
            assert result.exit_code == 0
&gt;           mock_template.assert_called_once_with(app_name, "default")

fabiplus/tests/test_cli_templates.py:183: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/lib/python3.10/unittest/mock.py:941: in assert_called_once_with
    return self.assert_called_with(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;MagicMock name='AppTemplate' id='135796279382160'&gt;, args = ('testapp', 'default'), kwargs = {}
expected = call('testapp', 'default'), actual = call('testapp', 'default', orm_backend='sqlmodel')
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x7b818903bc70&gt;, cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: AppTemplate('testapp', 'default')
E           Actual: AppTemplate('testapp', 'default', orm_backend='sqlmodel')

/usr/lib/python3.10/unittest/mock.py:929: AssertionError</failure></testcase><testcase classname="fabiplus.tests.test_cli_templates.TestAppCLI" name="test_startapp_command_with_template" time="0.021"><failure message="AssertionError: expected call not found.&#10;Expected: AppTemplate('testapp', 'api')&#10;Actual: AppTemplate('testapp', 'api', orm_backend='sqlmodel')">self = &lt;fabiplus.tests.test_cli_templates.TestAppCLI object at 0x7b818b6259f0&gt;

    def test_startapp_command_with_template(self):
        """Test startapp command with template option"""
        app_name = "testapp"
        template_type = "api"
    
        with patch("fabiplus.cli.commands.app.AppTemplate") as mock_template:
            mock_instance = MagicMock()
            mock_template.return_value = mock_instance
    
            with patch("pathlib.Path.cwd", return_value=self.temp_dir):
                with patch(
                    "fabiplus.cli.commands.app._is_fabiplus_project", return_value=True
                ):
                    result = self.runner.invoke(
                        app_app, ["startapp", app_name, "--template", template_type]
                    )
    
            assert result.exit_code == 0
&gt;           mock_template.assert_called_once_with(app_name, template_type)

fabiplus/tests/test_cli_templates.py:204: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/lib/python3.10/unittest/mock.py:941: in assert_called_once_with
    return self.assert_called_with(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;MagicMock name='AppTemplate' id='135796281170752'&gt;, args = ('testapp', 'api'), kwargs = {}
expected = call('testapp', 'api'), actual = call('testapp', 'api', orm_backend='sqlmodel')
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x7b818903a950&gt;, cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: AppTemplate('testapp', 'api')
E           Actual: AppTemplate('testapp', 'api', orm_backend='sqlmodel')

/usr/lib/python3.10/unittest/mock.py:929: AssertionError</failure></testcase><testcase classname="fabiplus.tests.test_cli_templates.TestAppCLI" name="test_startapp_command_with_directory" time="0.130" /><testcase classname="fabiplus.tests.test_cli_templates.TestAppCLI" name="test_startapp_command_with_force" time="0.016" /><testcase classname="fabiplus.tests.test_cli_templates.TestAppCLI" name="test_list_app_templates_command" time="0.009" /><testcase classname="fabiplus.tests.test_cli_templates.TestAppCLI" name="test_addmodel_command" time="0.067" /><testcase classname="fabiplus.tests.test_cli_templates.TestAppCLI" name="test_remove_app_command" time="0.008" /><testcase classname="fabiplus.tests.test_cli_templates.TestAppCLI" name="test_list_apps_command" time="0.009" /><testcase classname="fabiplus.tests.test_cli_templates.TestAppCLI" name="test_startapp_error_handling" time="0.013" /><testcase classname="fabiplus.tests.test_cli_templates.TestTemplateIntegration" name="test_full_project_creation_workflow" time="0.057" /><testcase classname="fabiplus.tests.test_cli_templates.TestTemplateIntegration" name="test_template_content_validation" time="0.055" /><testcase classname="fabiplus.tests.test_media_system.TestFileStorage" name="test_storage_initialization" time="0.002" /><testcase classname="fabiplus.tests.test_media_system.TestFileStorage" name="test_file_save_and_retrieve" time="0.002"><skipped type="pytest.skip" message="async def function and no async plugin installed (see warnings)">/home/danielaiyelu/Desktop/Helevon/new_fabi/venv/lib/python3.10/site-packages/_pytest/python.py:184: async def function and no async plugin installed (see warnings)</skipped></testcase><testcase classname="fabiplus.tests.test_media_system.TestFileStorage" name="test_file_deletion" time="0.001"><skipped type="pytest.skip" message="async def function and no async plugin installed (see warnings)">/home/danielaiyelu/Desktop/Helevon/new_fabi/venv/lib/python3.10/site-packages/_pytest/python.py:184: async def function and no async plugin installed (see warnings)</skipped></testcase><testcase classname="fabiplus.tests.test_media_system.TestFileStorage" name="test_file_listing" time="0.003"><skipped type="pytest.skip" message="async def function and no async plugin installed (see warnings)">/home/danielaiyelu/Desktop/Helevon/new_fabi/venv/lib/python3.10/site-packages/_pytest/python.py:184: async def function and no async plugin installed (see warnings)</skipped></testcase><testcase classname="fabiplus.tests.test_media_system.TestFileValidators" name="test_basic_file_validator" time="0.001" /><testcase classname="fabiplus.tests.test_media_system.TestFileValidators" name="test_file_size_validation" time="0.001"><skipped type="pytest.skip" message="async def function and no async plugin installed (see warnings)">/home/danielaiyelu/Desktop/Helevon/new_fabi/venv/lib/python3.10/site-packages/_pytest/python.py:184: async def function and no async plugin installed (see warnings)</skipped></testcase><testcase classname="fabiplus.tests.test_media_system.TestFileValidators" name="test_extension_validation" time="0.001"><skipped type="pytest.skip" message="async def function and no async plugin installed (see warnings)">/home/danielaiyelu/Desktop/Helevon/new_fabi/venv/lib/python3.10/site-packages/_pytest/python.py:184: async def function and no async plugin installed (see warnings)</skipped></testcase><testcase classname="fabiplus.tests.test_media_system.TestFileValidators" name="test_image_validator_initialization" time="0.002" /><testcase classname="fabiplus.tests.test_media_system.TestFileValidators" name="test_document_validator_initialization" time="0.001" /><testcase classname="fabiplus.tests.test_media_system.TestFileProcessors" name="test_file_processor_initialization" time="0.001" /><testcase classname="fabiplus.tests.test_media_system.TestFileProcessors" name="test_image_processing" time="0.001"><skipped type="pytest.skip" message="async def function and no async plugin installed (see warnings)">/home/danielaiyelu/Desktop/Helevon/new_fabi/venv/lib/python3.10/site-packages/_pytest/python.py:184: async def function and no async plugin installed (see warnings)</skipped></testcase><testcase classname="fabiplus.tests.test_media_system.TestFileHandlers" name="test_single_file_upload" time="0.004"><skipped type="pytest.skip" message="async def function and no async plugin installed (see warnings)">/home/danielaiyelu/Desktop/Helevon/new_fabi/venv/lib/python3.10/site-packages/_pytest/python.py:184: async def function and no async plugin installed (see warnings)</skipped></testcase><testcase classname="fabiplus.tests.test_media_system.TestFileHandlers" name="test_chunked_upload_session" time="0.003"><skipped type="pytest.skip" message="async def function and no async plugin installed (see warnings)">/home/danielaiyelu/Desktop/Helevon/new_fabi/venv/lib/python3.10/site-packages/_pytest/python.py:184: async def function and no async plugin installed (see warnings)</skipped></testcase><testcase classname="fabiplus.tests.test_media_system.TestMediaModels" name="test_media_file_model" time="0.004" /><testcase classname="fabiplus.tests.test_media_system.TestMediaModels" name="test_media_folder_model" time="0.002"><failure message="AssertionError: assert None == 'test-folder'&#10; +  where None = MediaFolder(name='Test Folder', description='Test folder description', id=UUID('60a7bb79-a055-436c-8e0c-17ce6cbf8468'), parent_id=None, created_at=datetime.datetime(2025, 7, 28, 12, 5, 19, 593072), updated_at=datetime.datetime(2025, 7, 28, 12, 5, 19, 593309), created_by=None, is_public=True, max_file_size=None, allowed_extensions=None).slug">self = &lt;fabiplus.tests.test_media_system.TestMediaModels object at 0x7b8189d49780&gt;

    def test_media_folder_model(self):
        """Test MediaFolder model"""
        folder = MediaFolder(name="Test Folder", description="Test folder description")
    
        assert folder.name == "Test Folder"
&gt;       assert folder.slug == "test-folder"  # Auto-generated slug
E       AssertionError: assert None == 'test-folder'
E        +  where None = MediaFolder(name='Test Folder', description='Test folder description', id=UUID('60a7bb79-a055-436c-8e0c-17ce6cbf8468'), parent_id=None, created_at=datetime.datetime(2025, 7, 28, 12, 5, 19, 593072), updated_at=datetime.datetime(2025, 7, 28, 12, 5, 19, 593309), created_by=None, is_public=True, max_file_size=None, allowed_extensions=None).slug

fabiplus/tests/test_media_system.py:296: AssertionError</failure></testcase><testcase classname="fabiplus.tests.test_media_system.TestMediaModels" name="test_media_file_properties" time="0.003" /><testcase classname="fabiplus.tests.test_media_system.TestMediaAPI" name="test_upload_endpoint_structure" time="0.001" /><testcase classname="fabiplus.tests.test_media_system.TestMediaAPI" name="test_download_endpoint_structure" time="0.001" /><testcase classname="fabiplus.tests.test_media_system.TestMediaIntegration" name="test_full_upload_workflow" time="0.002"><skipped type="pytest.skip" message="async def function and no async plugin installed (see warnings)">/home/danielaiyelu/Desktop/Helevon/new_fabi/venv/lib/python3.10/site-packages/_pytest/python.py:184: async def function and no async plugin installed (see warnings)</skipped></testcase><testcase classname="fabiplus.tests.test_media_system.TestMediaIntegration" name="test_full_download_workflow" time="0.002"><skipped type="pytest.skip" message="async def function and no async plugin installed (see warnings)">/home/danielaiyelu/Desktop/Helevon/new_fabi/venv/lib/python3.10/site-packages/_pytest/python.py:184: async def function and no async plugin installed (see warnings)</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMRegistry" name="test_orm_registry_basic" time="0.002"><failure message="AssertionError: assert 'tortoise' in ['sqlalchemy', 'sqlmodel']">self = &lt;fabiplus.tests.test_orm_choice.TestORMRegistry object at 0x7b8189d4bd90&gt;

    def test_orm_registry_basic(self):
        """Test basic ORM registry operations"""
        from fabiplus.core.orm import ORMRegistry
    
        # Test listing backends
        backends = ORMRegistry.list_backends()
        assert isinstance(backends, list)
        assert len(backends) &gt; 0
        assert "sqlmodel" in backends
        assert "sqlalchemy" in backends
&gt;       assert "tortoise" in backends
E       AssertionError: assert 'tortoise' in ['sqlalchemy', 'sqlmodel']

fabiplus/tests/test_orm_choice.py:33: AssertionError</failure></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMRegistry" name="test_orm_backend_registration" time="0.003"><failure message="ValueError: Unknown ORM backend: tortoise">self = &lt;fabiplus.tests.test_orm_choice.TestORMRegistry object at 0x7b8189d4beb0&gt;

    def test_orm_backend_registration(self):
        """Test ORM backend registration"""
        from fabiplus.core.orm import ORMRegistry
    
        # Test getting backend classes
        sqlmodel_backend = ORMRegistry.get_backend("sqlmodel")
        assert sqlmodel_backend is not None
    
        sqlalchemy_backend = ORMRegistry.get_backend("sqlalchemy")
        assert sqlalchemy_backend is not None
    
&gt;       tortoise_backend = ORMRegistry.get_backend("tortoise")

fabiplus/tests/test_orm_choice.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = &lt;class 'fabiplus.core.orm.base.ORMRegistry'&gt;, name = 'tortoise'

    @classmethod
    def get_backend(cls, name: str) -&gt; Type[BaseORMBackend]:
        """Get an ORM backend by name"""
        if name not in cls._backends:
&gt;           raise ValueError(f"Unknown ORM backend: {name}")
E           ValueError: Unknown ORM backend: tortoise

fabiplus/core/orm/base.py:124: ValueError</failure></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMRegistry" name="test_orm_backend_validation" time="0.002"><failure message="AssertionError: assert False is True&#10; +  where False = &lt;bound method ORMRegistry.validate_backend of &lt;class 'fabiplus.core.orm.base.ORMRegistry'&gt;&gt;('tortoise')&#10; +    where &lt;bound method ORMRegistry.validate_backend of &lt;class 'fabiplus.core.orm.base.ORMRegistry'&gt;&gt; = &lt;class 'fabiplus.core.orm.base.ORMRegistry'&gt;.validate_backend">self = &lt;fabiplus.tests.test_orm_choice.TestORMRegistry object at 0x7b8189d4bfd0&gt;

    def test_orm_backend_validation(self):
        """Test ORM backend validation"""
        from fabiplus.core.orm import ORMRegistry
    
        # Test valid backends
        assert ORMRegistry.validate_backend("sqlmodel") is True
        assert ORMRegistry.validate_backend("sqlalchemy") is True
&gt;       assert ORMRegistry.validate_backend("tortoise") is True
E       AssertionError: assert False is True
E        +  where False = &lt;bound method ORMRegistry.validate_backend of &lt;class 'fabiplus.core.orm.base.ORMRegistry'&gt;&gt;('tortoise')
E        +    where &lt;bound method ORMRegistry.validate_backend of &lt;class 'fabiplus.core.orm.base.ORMRegistry'&gt;&gt; = &lt;class 'fabiplus.core.orm.base.ORMRegistry'&gt;.validate_backend

fabiplus/tests/test_orm_choice.py:56: AssertionError</failure></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMRegistry" name="test_orm_backend_info" time="0.001"><failure message="ValueError: Unknown ORM backend: tortoise">self = &lt;fabiplus.tests.test_orm_choice.TestORMRegistry object at 0x7b8189d4bfa0&gt;

    def test_orm_backend_info(self):
        """Test ORM backend info retrieval"""
        from fabiplus.core.orm import ORMRegistry
    
        # Test SQLModel info
        info = ORMRegistry.get_backend_info("sqlmodel")
        assert info["name"] == "sqlmodel"
        assert "dependencies" in info
        assert "supports_async" in info
        assert info["supports_async"] is True
    
        # Test Tortoise info
&gt;       info = ORMRegistry.get_backend_info("tortoise")

fabiplus/tests/test_orm_choice.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
fabiplus/core/orm/base.py:135: in get_backend_info
    backend_class = cls.get_backend(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = &lt;class 'fabiplus.core.orm.base.ORMRegistry'&gt;, name = 'tortoise'

    @classmethod
    def get_backend(cls, name: str) -&gt; Type[BaseORMBackend]:
        """Get an ORM backend by name"""
        if name not in cls._backends:
&gt;           raise ValueError(f"Unknown ORM backend: {name}")
E           ValueError: Unknown ORM backend: tortoise

fabiplus/core/orm/base.py:124: ValueError</failure></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_orm_template_init" time="0.001"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:90: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_sqlmodel_backend_creation" time="0.001"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:96: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_sqlalchemy_backend_creation" time="0.001"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:102: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_tortoise_backend_creation" time="0.001"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:108: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_project_creation_with_orm_choice" time="0.001"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:114: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_model_generation_sqlmodel" time="0.001"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:120: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_model_generation_sqlalchemy" time="0.001"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:126: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_model_generation_tortoise" time="0.001"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:132: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_migration_system_sqlmodel" time="0.000"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:138: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_migration_system_sqlalchemy" time="0.001"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:144: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_migration_system_tortoise" time="0.001"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:150: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_api_generation_sqlmodel" time="0.001"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:156: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_api_generation_sqlalchemy" time="0.001"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:162: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_api_generation_tortoise" time="0.001"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:168: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_admin_interface_sqlmodel" time="0.000"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:174: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_admin_interface_sqlalchemy" time="0.001"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:180: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_admin_interface_tortoise" time="0.001"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:186: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_orm_switching" time="0.002"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:192: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMChoiceSystem" name="test_orm_compatibility_validation" time="0.001"><skipped type="pytest.skip" message="ORM choice system not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:198: ORM choice system not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMBackends" name="test_sqlmodel_backend_model_creation" time="0.001"><skipped type="pytest.skip" message="ORM backends not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:208: ORM backends not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMBackends" name="test_sqlalchemy_backend_model_creation" time="0.001"><skipped type="pytest.skip" message="ORM backends not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:213: ORM backends not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMBackends" name="test_tortoise_backend_model_creation" time="0.001"><skipped type="pytest.skip" message="ORM backends not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:218: ORM backends not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMBackends" name="test_backend_registry_system" time="0.001"><skipped type="pytest.skip" message="ORM backends not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:223: ORM backends not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMBackends" name="test_backend_configuration" time="0.001"><skipped type="pytest.skip" message="ORM backends not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:228: ORM backends not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMTemplates" name="test_sqlmodel_project_template" time="0.002"><skipped type="pytest.skip" message="ORM templates not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:237: ORM templates not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMTemplates" name="test_sqlalchemy_project_template" time="0.000"><skipped type="pytest.skip" message="ORM templates not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:242: ORM templates not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMTemplates" name="test_tortoise_project_template" time="0.001"><skipped type="pytest.skip" message="ORM templates not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:247: ORM templates not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMTemplates" name="test_orm_specific_dependencies" time="0.001"><skipped type="pytest.skip" message="ORM templates not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:252: ORM templates not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMTemplates" name="test_orm_specific_settings" time="0.001"><skipped type="pytest.skip" message="ORM templates not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:257: ORM templates not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMIntegration" name="test_full_workflow_sqlmodel" time="0.002"><skipped type="pytest.skip" message="ORM integration not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:266: ORM integration not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMIntegration" name="test_full_workflow_sqlalchemy" time="0.001"><skipped type="pytest.skip" message="ORM integration not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:272: ORM integration not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMIntegration" name="test_full_workflow_tortoise" time="0.001"><skipped type="pytest.skip" message="ORM integration not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:278: ORM integration not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestORMIntegration" name="test_cross_orm_compatibility" time="0.001"><skipped type="pytest.skip" message="ORM integration not yet implemented">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:284: ORM integration not yet implemented</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestFutureORMFeatures" name="test_orm_performance_comparison" time="0.001"><skipped type="pytest.skip" message="Future feature">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:294: Future feature</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestFutureORMFeatures" name="test_orm_feature_matrix" time="0.001"><skipped type="pytest.skip" message="Future feature">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:299: Future feature</skipped></testcase><testcase classname="fabiplus.tests.test_orm_choice.TestFutureORMFeatures" name="test_orm_migration_tools" time="0.002"><skipped type="pytest.skip" message="Future feature">/home/danielaiyelu/Desktop/Helevon/new_fabi/fabiplus/tests/test_orm_choice.py:304: Future feature</skipped></testcase><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionBase" name="test_permission_creation" time="0.001" /><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionBase" name="test_permission_matches" time="0.001" /><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionBase" name="test_permission_with_conditions" time="0.001"><failure message="AssertionError: assert True is False&#10; +  where True = &lt;bound method Permission.matches of Permission(id='a15786fa-59fe-4b6b-a0c4-ee9c24d19807', name='conditional_read', description='', scope=&lt;PermissionScope.MODEL: 'model'&gt;, action=&lt;PermissionAction.READ: 'read'&gt;, resource='User', conditions={'department': 'engineering'}, metadata={})&gt;('read', 'User')&#10; +    where &lt;bound method Permission.matches of Permission(id='a15786fa-59fe-4b6b-a0c4-ee9c24d19807', name='conditional_read', description='', scope=&lt;PermissionScope.MODEL: 'model'&gt;, action=&lt;PermissionAction.READ: 'read'&gt;, resource='User', conditions={'department': 'engineering'}, metadata={})&gt; = Permission(id='a15786fa-59fe-4b6b-a0c4-ee9c24d19807', name='conditional_read', description='', scope=&lt;PermissionScope.MODEL: 'model'&gt;, action=&lt;PermissionAction.READ: 'read'&gt;, resource='User', conditions={'department': 'engineering'}, metadata={}).matches">self = &lt;fabiplus.tests.test_permissions_system.TestPermissionBase object at 0x7b8189d82e00&gt;

    def test_permission_with_conditions(self):
        """Test permission with conditions"""
    
        perm = Permission(
            name="conditional_read",
            scope=PermissionScope.MODEL,
            action=PermissionAction.READ,
            resource="User",
            conditions={"department": "engineering"},
        )
    
        # Should match when condition is met
        assert perm.matches("read", "User", department="engineering") is True
    
        # Should not match when condition is not met
        assert perm.matches("read", "User", department="sales") is False
    
        # Should not match when condition is missing
&gt;       assert perm.matches("read", "User") is False
E       AssertionError: assert True is False
E        +  where True = &lt;bound method Permission.matches of Permission(id='a15786fa-59fe-4b6b-a0c4-ee9c24d19807', name='conditional_read', description='', scope=&lt;PermissionScope.MODEL: 'model'&gt;, action=&lt;PermissionAction.READ: 'read'&gt;, resource='User', conditions={'department': 'engineering'}, metadata={})&gt;('read', 'User')
E        +    where &lt;bound method Permission.matches of Permission(id='a15786fa-59fe-4b6b-a0c4-ee9c24d19807', name='conditional_read', description='', scope=&lt;PermissionScope.MODEL: 'model'&gt;, action=&lt;PermissionAction.READ: 'read'&gt;, resource='User', conditions={'department': 'engineering'}, metadata={})&gt; = Permission(id='a15786fa-59fe-4b6b-a0c4-ee9c24d19807', name='conditional_read', description='', scope=&lt;PermissionScope.MODEL: 'model'&gt;, action=&lt;PermissionAction.READ: 'read'&gt;, resource='User', conditions={'department': 'engineering'}, metadata={}).matches

fabiplus/tests/test_permissions_system.py:114: AssertionError</failure></testcase><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionBase" name="test_permission_denied_exception" time="0.001" /><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionRegistry" name="test_register_permission" time="0.002" /><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionRegistry" name="test_list_permissions" time="0.003" /><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionSet" name="test_permission_set_creation" time="0.001" /><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionSet" name="test_permission_set_operations" time="0.001" /><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionModels" name="test_user_permission_model" time="0.002" /><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionModels" name="test_model_permission_model" time="0.002" /><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionModels" name="test_field_permission_model" time="0.003" /><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionModels" name="test_row_permission_model" time="0.004" /><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionCheckers" name="test_model_permission_checker" time="0.034"><failure message="assert &lt;coroutine object AsyncMockMixin._execute_mock_call at 0x7b8188eaf530&gt; is True">self = &lt;fabiplus.tests.test_permissions_system.TestPermissionCheckers object at 0x7b8189da8040&gt;

    def test_model_permission_checker(self):
        """Test ModelPermissionChecker"""
    
        # Create model permission
        model_perm = ModelPermission(
            model_name="User", user_id=self.user.id, can_read=True, can_update=False
        )
        self.session.add(model_perm)
        self.session.commit()
    
        checker = ModelPermissionChecker(self.session)
    
        # Test permission checking
        read_perm = Permission(
            name="read_users",
            scope=PermissionScope.MODEL,
            action=PermissionAction.READ,
            resource="User",
        )
    
        # This would be async in real implementation
        # For testing, we'll mock the async behavior
        with patch.object(checker, "check_permission") as mock_check:
            mock_check.return_value = True
            result = checker.check_permission(self.user, read_perm)
&gt;           assert result is True
E           assert &lt;coroutine object AsyncMockMixin._execute_mock_call at 0x7b8188eaf530&gt; is True

fabiplus/tests/test_permissions_system.py:368: AssertionError</failure></testcase><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionCheckers" name="test_composite_permission_checker" time="0.023" /><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionDecorators" name="test_require_permission_decorator" time="0.004" /><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionDecorators" name="test_require_model_permission_decorator" time="0.004" /><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionDecorators" name="test_permission_required_decorator" time="0.003" /><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionIntegration" name="test_full_permission_workflow" time="0.036"><failure message="assert &lt;coroutine object AsyncMockMixin._execute_mock_call at 0x7b8188d8dd20&gt; is True">self = &lt;fabiplus.tests.test_permissions_system.TestPermissionIntegration object at 0x7b8189da8730&gt;

    def test_full_permission_workflow(self):
        """Test complete permission workflow"""
    
        # 1. Create permissions
        model_perm = ModelPermission(
            model_name="User", user_id=self.user.id, can_read=True, can_update=True
        )
    
        field_perm = FieldPermission(
            model_name="User",
            field_name="email",
            user_id=self.user.id,
            can_read=True,
            can_write=False,
            is_sensitive=True,
        )
    
        self.session.add(model_perm)
        self.session.add(field_perm)
        self.session.commit()
    
        # 2. Test permission checking
        checker = CompositePermissionChecker(self.session)
    
        # Mock the async methods for testing
        with patch.object(checker, "check_permission") as mock_check:
            mock_check.return_value = True
    
            # Test model permission
            model_permission = Permission(
                name="read_users",
                scope=PermissionScope.MODEL,
                action=PermissionAction.READ,
                resource="User",
            )
    
            result = checker.check_permission(self.user, model_permission)
&gt;           assert result is True
E           assert &lt;coroutine object AsyncMockMixin._execute_mock_call at 0x7b8188d8dd20&gt; is True

fabiplus/tests/test_permissions_system.py:480: AssertionError</failure></testcase><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionIntegration" name="test_permission_hierarchy" time="0.032" /><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionIntegration" name="test_ownership_permissions" time="0.026" /><testcase classname="fabiplus.tests.test_permissions_system.TestPermissionPerformance" name="test_permission_set_performance" time="0.092" /><testcase classname="fabiplus.tests.test_response_system.TestStreamingResponses" name="test_streaming_json_response_creation" time="0.001" /><testcase classname="fabiplus.tests.test_response_system.TestStreamingResponses" name="test_streaming_json_content" time="0.001"><skipped type="pytest.skip" message="async def function and no async plugin installed (see warnings)">/home/danielaiyelu/Desktop/Helevon/new_fabi/venv/lib/python3.10/site-packages/_pytest/python.py:184: async def function and no async plugin installed (see warnings)</skipped></testcase><testcase classname="fabiplus.tests.test_response_system.TestStreamingResponses" name="test_streaming_csv_response_creation" time="0.001" /><testcase classname="fabiplus.tests.test_response_system.TestStreamingResponses" name="test_streaming_csv_content" time="0.001"><skipped type="pytest.skip" message="async def function and no async plugin installed (see warnings)">/home/danielaiyelu/Desktop/Helevon/new_fabi/venv/lib/python3.10/site-packages/_pytest/python.py:184: async def function and no async plugin installed (see warnings)</skipped></testcase><testcase classname="fabiplus.tests.test_response_system.TestStreamingResponses" name="test_streaming_xml_response_creation" time="0.001" /><testcase classname="fabiplus.tests.test_response_system.TestStreamingResponses" name="test_server_sent_events_response" time="0.001"><skipped type="pytest.skip" message="async def function and no async plugin installed (see warnings)">/home/danielaiyelu/Desktop/Helevon/new_fabi/venv/lib/python3.10/site-packages/_pytest/python.py:184: async def function and no async plugin installed (see warnings)</skipped></testcase><testcase classname="fabiplus.tests.test_response_system.TestStreamingResponses" name="test_chunked_data_response" time="0.002"><skipped type="pytest.skip" message="async def function and no async plugin installed (see warnings)">/home/danielaiyelu/Desktop/Helevon/new_fabi/venv/lib/python3.10/site-packages/_pytest/python.py:184: async def function and no async plugin installed (see warnings)</skipped></testcase><testcase classname="fabiplus.tests.test_response_system.TestPaginationResponses" name="test_paginated_response_creation" time="0.001" /><testcase classname="fabiplus.tests.test_response_system.TestPaginationResponses" name="test_cursor_paginated_response_creation" time="0.001" /><testcase classname="fabiplus.tests.test_response_system.TestPaginationResponses" name="test_infinite_scroll_response_creation" time="0.001" /><testcase classname="fabiplus.tests.test_response_system.TestPaginationResponses" name="test_streaming_paginated_response" time="0.001"><skipped type="pytest.skip" message="async def function and no async plugin installed (see warnings)">/home/danielaiyelu/Desktop/Helevon/new_fabi/venv/lib/python3.10/site-packages/_pytest/python.py:184: async def function and no async plugin installed (see warnings)</skipped></testcase><testcase classname="fabiplus.tests.test_response_system.TestFormatResponses" name="test_excel_response_creation" time="0.001" /><testcase classname="fabiplus.tests.test_response_system.TestFormatResponses" name="test_pdf_response_creation" time="0.001" /><testcase classname="fabiplus.tests.test_response_system.TestFormatResponses" name="test_image_response_creation" time="0.001" /><testcase classname="fabiplus.tests.test_response_system.TestFormatResponses" name="test_zip_response_creation" time="0.002" /><testcase classname="fabiplus.tests.test_response_system.TestFormatResponses" name="test_custom_format_response_creation" time="0.002" /><testcase classname="fabiplus.tests.test_response_system.TestResponseIntegration" name="test_streaming_json_endpoint" time="0.010" /><testcase classname="fabiplus.tests.test_response_system.TestResponseIntegration" name="test_paginated_endpoint" time="0.009" /><testcase classname="fabiplus.tests.test_response_system.TestResponseIntegration" name="test_csv_export_endpoint" time="0.008"><failure message="AssertionError: assert 'text/csv; charset=utf-8' == 'text/csv'&#10;  - text/csv&#10;  + text/csv; charset=utf-8">self = &lt;fabiplus.tests.test_response_system.TestResponseIntegration object at 0x7b8189de0760&gt;

    def test_csv_export_endpoint(self):
        """Test CSV export endpoint integration"""
    
        @self.app.get("/export-csv")
        async def export_csv():
            def data_gen():
                for i in range(10):
                    yield {
                        "id": i,
                        "name": f"User {i}",
                        "email": f"user{i}@example.com",
                    }
    
            return StreamingCSVResponse(data_generator=data_gen(), filename="users.csv")
    
        response = self.client.get("/export-csv")
        assert response.status_code == 200
&gt;       assert response.headers["content-type"] == "text/csv"
E       AssertionError: assert 'text/csv; charset=utf-8' == 'text/csv'
E         - text/csv
E         + text/csv; charset=utf-8

fabiplus/tests/test_response_system.py:370: AssertionError</failure></testcase><testcase classname="fabiplus.tests.test_response_system.TestPerformance" name="test_large_dataset_streaming" time="0.001"><skipped type="pytest.skip" message="async def function and no async plugin installed (see warnings)">/home/danielaiyelu/Desktop/Helevon/new_fabi/venv/lib/python3.10/site-packages/_pytest/python.py:184: async def function and no async plugin installed (see warnings)</skipped></testcase><testcase classname="fabiplus.tests.test_response_system.TestPerformance" name="test_pagination_performance" time="0.006" /><testcase classname="fabiplus.tests.test_response_system.TestErrorHandling" name="test_streaming_error_handling" time="0.002"><skipped type="pytest.skip" message="async def function and no async plugin installed (see warnings)">/home/danielaiyelu/Desktop/Helevon/new_fabi/venv/lib/python3.10/site-packages/_pytest/python.py:184: async def function and no async plugin installed (see warnings)</skipped></testcase><testcase classname="fabiplus.tests.test_response_system.TestErrorHandling" name="test_format_response_error_handling" time="0.001" /><testcase classname="fabiplus.tests.test_templates.TestProjectTemplate" name="test_project_template_init" time="0.002" /><testcase classname="fabiplus.tests.test_templates.TestProjectTemplate" name="test_project_template_init_with_docker" time="0.002" /><testcase classname="fabiplus.tests.test_templates.TestProjectTemplate" name="test_get_template_context" time="0.002" /><testcase classname="fabiplus.tests.test_templates.TestProjectTemplate" name="test_create_project_structure" time="0.003" /><testcase classname="fabiplus.tests.test_templates.TestProjectTemplate" name="test_create_project_files_basic" time="0.043" /><testcase classname="fabiplus.tests.test_templates.TestProjectTemplate" name="test_create_project_files_with_docker" time="0.041" /><testcase classname="fabiplus.tests.test_templates.TestProjectTemplate" name="test_create_project_files_without_docker" time="0.042" /><testcase classname="fabiplus.tests.test_templates.TestProjectTemplate" name="test_template_content_rendering" time="0.043" /><testcase classname="fabiplus.tests.test_templates.TestProjectTemplate" name="test_create_main_app" time="0.004"><failure message="AssertionError: expected call not found.&#10;Expected: AppTemplate('core', 'minimal')&#10;Actual: AppTemplate('core', 'minimal', orm_backend='sqlmodel')">self = &lt;fabiplus.tests.test_templates.TestProjectTemplate object at 0x7b8189de1990&gt;
mock_app_template = &lt;MagicMock name='AppTemplate' id='135796278202752'&gt;

    @patch("fabiplus.cli.templates.app.AppTemplate")
    def test_create_main_app(self, mock_app_template):
        """Test main app creation"""
        template = ProjectTemplate(self.project_name)
        project_dir = self.temp_dir / self.project_name
        project_dir.mkdir(parents=True)
    
        # Mock AppTemplate
        mock_instance = MagicMock()
        mock_app_template.return_value = mock_instance
    
        template._create_main_app(project_dir)
    
        # Verify AppTemplate was called correctly
&gt;       mock_app_template.assert_called_once_with("core", "minimal")

fabiplus/tests/test_templates.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/lib/python3.10/unittest/mock.py:941: in assert_called_once_with
    return self.assert_called_with(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;MagicMock name='AppTemplate' id='135796278202752'&gt;, args = ('core', 'minimal'), kwargs = {}
expected = call('core', 'minimal'), actual = call('core', 'minimal', orm_backend='sqlmodel')
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x7b8189b6c0d0&gt;, cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: AppTemplate('core', 'minimal')
E           Actual: AppTemplate('core', 'minimal', orm_backend='sqlmodel')

/usr/lib/python3.10/unittest/mock.py:929: AssertionError</failure></testcase><testcase classname="fabiplus.tests.test_templates.TestProjectTemplate" name="test_create_project_full_workflow" time="0.046" /><testcase classname="fabiplus.tests.test_templates.TestProjectTemplate" name="test_create_project_with_force" time="0.044" /><testcase classname="fabiplus.tests.test_templates.TestProjectTemplate" name="test_init_existing_project" time="0.037" /><testcase classname="fabiplus.tests.test_templates.TestAppTemplate" name="test_app_template_init" time="0.001" /><testcase classname="fabiplus.tests.test_templates.TestAppTemplate" name="test_get_template_context" time="0.002" /><testcase classname="fabiplus.tests.test_templates.TestAppTemplate" name="test_create_app_files" time="0.024" /><testcase classname="fabiplus.tests.test_templates.TestAppTemplate" name="test_app_template_content_rendering" time="0.020" /><testcase classname="fabiplus.tests.test_templates.TestAppTemplate" name="test_create_app_with_force" time="0.026" /><testcase classname="fabiplus.tests.test_templates.TestAppTemplate" name="test_generate_model_code" time="0.036" /></testsuite></testsuites>